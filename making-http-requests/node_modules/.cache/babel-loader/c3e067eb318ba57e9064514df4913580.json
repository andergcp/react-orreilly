{"ast":null,"code":"const MOVIES_URL = process.env.REACT_APP_MOVIES_FIREBASE_URL;\nexport const addMovie = async movie => {\n  try {\n    // const response = await fetch(MOVIES_URL, {\n    const response = await fetch(MOVIES_URL, {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    // const data = await response.json();\n  } catch (error) {\n    console.error(\"Hubo un error guardando la película\", error);\n  }\n};\nexport const fetchMovies = async (setIsLoading, setMoviesList, setError) => {\n  try {\n    setIsLoading(true);\n    // const response = await fetch(\"https://swapi.dev/api/films/\"); // Fetching the swapi API\n    const response = await fetch(MOVIES_URL);\n    if (!response.ok) {\n      throw new Error(\"Something went wrong\");\n    }\n    const data = await response.json();\n    // const moviesList = [];\n    // for (const key in data) {\n    //   moviesList.push({\n    //     id: key,\n    //     title: data[key].title,\n    //     releaseDate: data[key].releaseDate,\n    //     openingText: data[key].openingText,\n    //   });\n    // }\n    const moviesList = Object.keys(data).map(key => ({\n      id: key,\n      title: data[key].title,\n      releaseDate: data[key].releaseDate,\n      openingText: data[key].openingText\n    }));\n    setMoviesList(moviesList);\n  } catch (error) {\n    setError(error.message);\n  }\n  setIsLoading(false);\n};\n\n// Function using then\n// function fetchMovies() {\n//   fetch(\"https://swapi.dev/api/films/\")\n//     .then((response) => response.json())\n//     .then((data) => {\n//       const tranformedData = data.results.map((movieData) => {\n//         return {\n//           id: movieData.episode_id,\n//           title: movieData.title,\n//           releaseDate: movieData.release_date,\n//           openingText: movieData.opening_crawl,\n//         };\n//       });\n//       setMoviesList(tranformedData);\n//     });\n// }","map":{"version":3,"names":["MOVIES_URL","process","env","REACT_APP_MOVIES_FIREBASE_URL","addMovie","movie","response","fetch","method","body","JSON","stringify","headers","error","console","fetchMovies","setIsLoading","setMoviesList","setError","ok","Error","data","json","moviesList","Object","keys","map","key","id","title","releaseDate","openingText","message"],"sources":["/Users/andersoncastiblanco/Documents/Learning/React-orreilly/making-http-requests/src/services/moviesService.js"],"sourcesContent":["const MOVIES_URL = process.env.REACT_APP_MOVIES_FIREBASE_URL;\n\nexport const addMovie = async (movie) => {\n  try {\n    // const response = await fetch(MOVIES_URL, {\n    const response = await fetch(MOVIES_URL, {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    // const data = await response.json();\n  } catch (error) {\n    console.error(\"Hubo un error guardando la película\", error);\n  }\n};\n\nexport const fetchMovies = async (setIsLoading, setMoviesList, setError) => {\n  try {\n    setIsLoading(true);\n    // const response = await fetch(\"https://swapi.dev/api/films/\"); // Fetching the swapi API\n    const response = await fetch(MOVIES_URL);\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong\");\n    }\n    const data = await response.json();\n    // const moviesList = [];\n    // for (const key in data) {\n    //   moviesList.push({\n    //     id: key,\n    //     title: data[key].title,\n    //     releaseDate: data[key].releaseDate,\n    //     openingText: data[key].openingText,\n    //   });\n    // }\n    const moviesList = Object.keys(data).map((key) => ({\n      id: key,\n      title: data[key].title,\n      releaseDate: data[key].releaseDate,\n      openingText: data[key].openingText,\n    }));\n    setMoviesList(moviesList);\n  } catch (error) {\n    setError(error.message);\n  }\n  setIsLoading(false);\n};\n\n// Function using then\n// function fetchMovies() {\n//   fetch(\"https://swapi.dev/api/films/\")\n//     .then((response) => response.json())\n//     .then((data) => {\n//       const tranformedData = data.results.map((movieData) => {\n//         return {\n//           id: movieData.episode_id,\n//           title: movieData.title,\n//           releaseDate: movieData.release_date,\n//           openingText: movieData.opening_crawl,\n//         };\n//       });\n//       setMoviesList(tranformedData);\n//     });\n// }\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B;AAE5D,OAAO,MAAMC,QAAQ,GAAG,MAAOC,KAAK,IAAK;EACvC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,UAAU,EAAE;MACvCQ,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;MAC3BO,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC7D;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOC,YAAY,EAAEC,aAAa,EAAEC,QAAQ,KAAK;EAC1E,IAAI;IACFF,YAAY,CAAC,IAAI,CAAC;IAClB;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACP,UAAU,CAAC;IAExC,IAAI,CAACM,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,GAAG,CAAEC,GAAG,KAAM;MACjDC,EAAE,EAAED,GAAG;MACPE,KAAK,EAAER,IAAI,CAACM,GAAG,CAAC,CAACE,KAAK;MACtBC,WAAW,EAAET,IAAI,CAACM,GAAG,CAAC,CAACG,WAAW;MAClCC,WAAW,EAAEV,IAAI,CAACM,GAAG,CAAC,CAACI;IACzB,CAAC,CAAC,CAAC;IACHd,aAAa,CAACM,UAAU,CAAC;EAC3B,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdK,QAAQ,CAACL,KAAK,CAACmB,OAAO,CAAC;EACzB;EACAhB,YAAY,CAAC,KAAK,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}